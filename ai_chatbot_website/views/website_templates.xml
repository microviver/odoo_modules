<?xml version="1.0" encoding="UTF-8"?>
<odoo>
<template id="chatbot_button_and_script" name="Chatbot Button" inherit_id="website.layout">
    <xpath expr="//body" position="inside">
        <button id="chatbot-toggle-button"
                style="position: fixed; bottom: 20px; right: 20px; background-color: #6a0dad; color: white; border: none; border-radius: 50%; width: 60px; height: 60px; box-shadow: 0 4px 12px rgba(0,0,0,0.4); font-size: 30px; z-index: 10000; cursor: pointer; transition: background-color 0.3s ease, transform 0.2s ease;">
            💬
        </button>

        <style>
            #chatbot-resize-grip {
                position: absolute;
                width: 20px;
                height: 20px;
                bottom: 0;
                right: 0;
                background: linear-gradient(135deg, transparent 40%, #ccc 40%, #ccc 60%, transparent 60%);
                background-repeat: no-repeat;
                background-position: center;
                cursor: se-resize;
                z-index: 10001;
            }
        </style>

        <script type="module">
        
        <![CDATA[
            document.addEventListener('DOMContentLoaded', function () {
                console.log("✅ chatbot inline ativo");

                const toggleButton = document.getElementById('chatbot-toggle-button');
                let chatbotBox = null;
                let typingIndicator = null;
                let inputField = null;
                let messageContainer = null;
                let maximizeButton = null;
                let resizeGrip = null;

                const defaultChatboxWidth = '350px';
                const defaultChatboxHeight = '450px';

                let isChatboxMaximized = false;

                let isDragging = false;
                let offset = { x: 0, y: 0 };
                let chatbotHeader = null;

                function renderChatbotBox() {
                    if (!chatbotBox) {
                        chatbotBox = document.createElement("div");
                        chatbotBox.id = "chatbot-box";
                        chatbotBox.style.cssText = `
                            display: none;
                            position: fixed;
                            bottom: 90px;
                            right: 20px;
                            width: ${defaultChatboxWidth};
                            height: ${defaultChatboxHeight};
                            background-color: white;
                            border: 1px solid #e0e0e0;
                            border-radius: 10px;
                            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
                            z-index: 9999;
                            flex-direction: column;
                            overflow: auto;
                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                            transition: all 0.3s ease;
                            resize: both;
                            min-width: 300px;
                            min-height: 350px;
                        `;

                        chatbotBox.innerHTML = `
                            <div id="chatbot-header" style="background-color: #2E4C1E; color: white; padding: 12px 15px; border-top-left-radius: 9px; border-top-right-radius: 9px; display: flex; justify-content: space-between; align-items: center; font-size: 1.1em; font-weight: bold; user-select: none; cursor: grab;">
                                <span>Simbi 🧠</span>
                                <div style="display: flex; gap: 8px;">
                                    <button id="chatbot-maximize-button" style="background: none; border: none; color: white; font-size: 20px; cursor: pointer; padding: 0;">&#x26F6;</button>
                                    <button id="chatbot-inline-close-button" style="background: none; border: none; color: white; font-size: 22px; cursor: pointer; padding: 0;">×</button>
                                </div>
                            </div>
                            <div id="chatbot-messages-container" style="flex-grow: 1; padding: 15px; overflow-y: auto; background-color: #fcfcfc; scroll-behavior: smooth;"></div>
                            <div id="chatbot-typing" style="padding: 8px 15px; font-style: italic; color: #888; text-align: center; display: none; font-size: 0.9em;"><em>digitando...</em></div>
                            <div style="padding: 15px; border-top: 1px solid #f0f0f0; display: flex; align-items: center; background-color: #ffffff; min-height: 70px;">
                                <input type="text" id="chatbot-input" placeholder="Digite sua mensagem..." style="flex-grow: 1; padding: 12px; border: 1px solid #ddd; border-radius: 25px; margin-right: 10px; font-size: 0.95em; outline: none; transition: border-color 0.3s ease; box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);"/>
                                <button id="chatbot-send-button" style="background-color: #4CAF50; color: white; border: none; padding: 12px 20px; border-radius: 25px; cursor: pointer; font-size: 0.95em; font-weight: bold; transition: background-color 0.3s ease; box-shadow: 0 2px 5px rgba(0,0,0,0.2);">Enviar</button>
                            </div>
                        `;

                        resizeGrip = document.createElement("div");
                        resizeGrip.id = "chatbot-resize-grip";
                        chatbotBox.appendChild(resizeGrip);

                        document.body.appendChild(chatbotBox);

                        typingIndicator = document.getElementById("chatbot-typing");
                        inputField = document.getElementById("chatbot-input");
                        messageContainer = document.getElementById("chatbot-messages-container");
                        maximizeButton = document.getElementById("chatbot-maximize-button");
                        const sendButton = document.getElementById("chatbot-send-button");
                        const closeButton = document.getElementById("chatbot-inline-close-button");
                        chatbotHeader = document.getElementById('chatbot-header');

                        inputField.addEventListener("focus", () => {
                            inputField.style.borderColor = '#2E4C1E';
                            inputField.style.boxShadow = 'inset 0 1px 3px rgba(0,0,0,0.05), 0 0 0 2px rgba(106, 13, 173, 0.2)';
                        });
                        inputField.addEventListener("blur", () => {
                            inputField.style.borderColor = '#ddd';
                            inputField.style.boxShadow = 'inset 0 1px 3px rgba(0,0,0,0.05)';
                        });

                        inputField.addEventListener("keypress", (e) => {
                            if (e.key === "Enter") handleInput();
                        });
                        sendButton.addEventListener("click", handleInput);
                        closeButton.addEventListener("click", toggleChatbotVisibility);
                        maximizeButton.addEventListener("click", toggleChatboxSize);

                        chatbotHeader.addEventListener('mousedown', (e) => {
                            if (e.target.tagName === 'BUTTON' || e.target.closest('button')) return;
                            isDragging = true;
                            chatbotHeader.style.cursor = 'grabbing';
                            offset = {
                                x: chatbotBox.offsetLeft - e.clientX,
                                y: chatbotBox.offsetTop - e.clientY
                            };
                            chatbotBox.style.right = 'auto';
                            chatbotBox.style.bottom = 'auto';
                        });

                        document.addEventListener('mousemove', (e) => {
                            if (!isDragging) return;
                            let newLeft = e.clientX + offset.x;
                            let newTop = e.clientY + offset.y;
                            if (newLeft < 0) newLeft = 0;
                            if (newTop < 0) newTop = 0;
                            if (newLeft + chatbotBox.offsetWidth > window.innerWidth) {
                                newLeft = window.innerWidth - chatbotBox.offsetWidth;
                            }
                            if (newTop + chatbotBox.offsetHeight > window.innerHeight) {
                                newTop = window.innerHeight - chatbotBox.offsetHeight;
                            }
                            chatbotBox.style.left = newLeft + 'px';
                            chatbotBox.style.top = newTop + 'px';
                        });

                        document.addEventListener('mouseup', () => {
                            isDragging = false;
                            chatbotHeader.style.cursor = 'grab';
                        });
                    }
                }

                function toggleChatboxSize() {
                    if (isChatboxMaximized) {
                        chatbotBox.style.width = defaultChatboxWidth;
                        chatbotBox.style.height = defaultChatboxHeight;
                        chatbotBox.style.right = '20px';
                        chatbotBox.style.bottom = '90px';
                        chatbotBox.style.left = 'auto';
                        chatbotBox.style.top = 'auto';
                        chatbotBox.style.resize = 'both';
                        maximizeButton.innerHTML = '&#x26F6;';
                    } else {
                        chatbotBox.style.width = 'calc(100% - 40px)';
                        chatbotBox.style.height = 'calc(100% - 110px)';
                        chatbotBox.style.right = '20px';
                        chatbotBox.style.bottom = '90px';
                        chatbotBox.style.left = '20px';
                        chatbotBox.style.top = '20px';
                        chatbotBox.style.resize = 'none';
                        maximizeButton.innerHTML = '&#x25A1;';
                    }
                    isChatboxMaximized = !isChatboxMaximized;
                }

                function toggleChatbotVisibility() {
                    renderChatbotBox();
                    if (chatbotBox.style.display === 'none' || chatbotBox.style.display === '') {
                        chatbotBox.style.display = 'flex';
                        toggleButton.textContent = '✖️';
                        toggleButton.style.
                        backgroundColor = '#dc3545';
                        if (isChatboxMaximized) {
                            toggleChatboxSize();
                        }
                    } else {
                        chatbotBox.style.display = 'none';
                        toggleButton.textContent = '💬';
                        toggleButton.style.backgroundColor = '#2E4C1E';
                    }
                }

                function processMarkdownBold(text) {
                    let processedText = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                    processedText = processedText.replace(/\*(.*?)\*/g, '<em>$1</em>');
                    return processedText;
                }

                function handleInput() {
                    const question = inputField.value.trim();
                    if (!question) return;

                    const userMsg = document.createElement("div");
                    userMsg.textContent = question;
                    userMsg.style.cssText = "margin-bottom: 10px; text-align: right; background-color: #e3f2fd; padding: 10px 15px; border-radius: 18px 18px 3px 18px; max-width: 85%; margin-left: auto; color: #333; box-shadow: 0 1px 2px rgba(0,0,0,0.1); word-wrap: break-word;";
                    messageContainer.appendChild(userMsg);

                    inputField.value = "";
                    typingIndicator.style.display = "block";
                    messageContainer.scrollTop = messageContainer.scrollHeight;

                    fetch("/ai_chatbot/ask", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ question })
                    })
                    .then(r => r.json())
                    .then(data => {
                        typingIndicator.style.display = "none";
                        const botMsg = document.createElement("div");
                        const botAnswer = data?.result?.answer || "❌ Erro ou resposta inesperada.";
                        botMsg.innerHTML = processMarkdownBold(botAnswer);
                        botMsg.style.cssText = "margin-bottom: 10px; text-align: left; background-color: #f1f8e9; padding: 10px 15px; border-radius: 18px 18px 18px 3px; max-width: 85%; margin-right: auto; color: #333; box-shadow: 0 1px 2px rgba(0,0,0,0.1); word-wrap: break-word;";
                        messageContainer.appendChild(botMsg);
                        messageContainer.scrollTop = messageContainer.scrollHeight;
                    })
                    .catch(err => {
                        typingIndicator.style.display = "none";
                        const errMsg = document.createElement("div");
                        errMsg.textContent = "❌ Erro ao contactar o servidor.";
                        errMsg.style.cssText = "margin-bottom: 10px; text-align: left; background-color: #ffebee; padding: 10px 15px; border-radius: 18px; max-width: 85%; margin-right: auto; color: #c62828; box-shadow: 0 1px 2px rgba(0,0,0,0.1); word-wrap: break-word;";
                        messageContainer.appendChild(errMsg);
                        messageContainer.scrollTop = messageContainer.scrollHeight;
                    });
                }

                if (toggleButton) toggleButton.addEventListener("click", toggleChatbotVisibility);
            });
            ]]>
        </script>
    </xpath>
</template>
</odoo>

