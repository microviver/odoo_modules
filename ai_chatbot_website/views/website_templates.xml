Com certeza\! Aqui est√° o c√≥digo Odoo XML completo, incorporando as melhorias discutidas para a funcionalidade de redimensionamento e a corre√ß√£o do corte do bot√£o "Enviar", atrav√©s de um ajuste no padding.

**Principais Mudan√ßas Implementadas:**

1.  **Redu√ß√£o do `padding` vertical:** Na `div` que cont√©m o input e o bot√£o, o `padding` foi alterado de `15px` para `10px 15px;`. Isso reduz o espa√ßo vertical ocupado por essa se√ß√£o, dando mais folga para o bot√£o n√£o ser cortado.
2.  **Melhoria na Fun√ß√£o `setupResize`:** A l√≥gica de redimensionamento foi ajustada para garantir que o chatbot mantenha sua posi√ß√£o relativa ao canto inferior direito da tela ap√≥s o redimensionamento, evitando "saltos" ou desalinhamentos.

<!-- end list -->

```xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
  <template id="chatbot_button_and_script" name="Chatbot Button" inherit_id="website.layout">
    <xpath expr="//body" position="inside">
      <button id="chatbot-toggle-button"
              style="position: fixed; bottom: 20px; right: 20px; background-color: #2E4C1E; color: white; border: none; border-radius: 50%; width: 60px; height: 60px; box-shadow: 0 4px 12px rgba(0,0,0,0.4); font-size: 30px; z-index: 10000; cursor: pointer;">
        üí¨
      </button>

      <script type="module">
        <![CDATA[
        document.addEventListener('DOMContentLoaded', function () {
          const toggleButton = document.getElementById('chatbot-toggle-button');
          let chatbotBox = null;
          let typingIndicator = null;
          let inputField = null;
          let messageContainer = null;
          let maximizeButton = null;
          let resizeHandle = null;
          let isChatboxMaximized = false;

          const defaultChatboxWidth = '350px';
          const defaultChatboxHeight = '450px'; // Pode ser necess√°rio ajustar ligeiramente se o corte persistir em diferentes navegadores/tamanhos de fonte
          const minChatboxWidth = 300;
          const minChatboxHeight = 200;

          function renderChatbotBox() {
            if (!chatbotBox) {
              chatbotBox = document.createElement("div");
              chatbotBox.id = "chatbot-box";
              document.body.appendChild(chatbotBox);
            }

            chatbotBox.style.cssText = `
              display: none;
              position: fixed;
              bottom: 90px;
              right: 20px;
              width: ${defaultChatboxWidth};
              height: ${defaultChatboxHeight};
              background-color: white;
              border: 1px solid #e0e0e0;
              border-radius: 10px;
              box-shadow: 0 8px 25px rgba(0,0,0,0.2);
              z-index: 9999;
              flex-direction: column;
              overflow: hidden;
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              display: flex;
            `;

            chatbotBox.innerHTML = `
              <div id="chatbot-header" style="background-color: #2E4C1E; color: white; padding: 12px 15px; border-top-left-radius: 9px; border-top-right-radius: 9px; display: flex; justify-content: space-between; align-items: center; font-size: 1.2em; font-weight: bold;">
                <span>Simbi üß†</span>
                <div>
                  <button id="chatbot-maximize-button" style="background: none; border: none; color: white; font-size: 20px; cursor: pointer;">&#x26F6;</button>
                  <button id="chatbot-inline-close-button" style="background: none; border: none; color: white; font-size: 22px; cursor: pointer;">&times;</button>
                </div>
              </div>
              <div id="chatbot-messages-container" style="flex-grow: 1; padding: 15px; overflow-y: auto; background-color: #fcfcfc;"></div>
              <div id="chatbot-typing" style="padding: 8px 15px; font-style: italic; color: #888; text-align: center; display: none;">escribiendo...</div>
              <div style="padding: 10px 15px; border-top: 1px solid #f0f0f0; display: flex;">
                <input type="text" id="chatbot-input" placeholder="Escribe tu mensaje..." style="flex-grow: 1; padding: 12px; border: 1px solid #ddd; border-radius: 25px; margin-right: 10px; font-size: 1.2em;"/>
                <button id="chatbot-send-button" style="background-color: #4CAF50; color: white; border: none; padding: 12px 20px; border-radius: 25px; cursor: pointer;">Enviar</button>
              </div>
              <div id="chatbot-resize-handle" style="
                position: absolute;
                width: 15px;
                height: 15px;
                left: 5px;
                top: 5px;
                cursor: nesw-resize;
                background: transparent;
                z-index: 10000;
              "></div>
            `;

            typingIndicator = document.getElementById("chatbot-typing");
            inputField = document.getElementById("chatbot-input");
            messageContainer = document.getElementById("chatbot-messages-container");
            maximizeButton = document.getElementById("chatbot-maximize-button");
            resizeHandle = document.getElementById("chatbot-resize-handle");

            document.getElementById("chatbot-send-button").addEventListener("click", handleInput);
            inputField.addEventListener("keypress", (e) => {
              if (e.key === "Enter") handleInput();
            });

            document.getElementById("chatbot-inline-close-button").addEventListener("click", (e) => {
              e.stopPropagation();
              chatbotBox.style.display = 'none';
              toggleButton.style.display = 'block';
            });

            maximizeButton.addEventListener("click", () => {
              if (isChatboxMaximized) {
                chatbotBox.style.width = defaultChatboxWidth;
                chatbotBox.style.height = defaultChatboxHeight;
                maximizeButton.innerHTML = '&#x26F6;'; // Restore icon for minimize
              } else {
                chatbotBox.style.width = 'calc(100% - 40px)';
                chatbotBox.style.height = 'calc(100% - 110px)';
                maximizeButton.innerHTML = '&#x25A1;'; // Icon for maximize
              }
              isChatboxMaximized = !isChatboxMaximized;
            });

            setupResize(resizeHandle);
          }

          function setupResize(handle) {
            let isResizing = false;
            let startX = 0;
            let startY = 0;
            let startWidth = 0;
            let startHeight = 0;
            let startRight = 0;
            let startBottom = 0;

            handle.addEventListener('mousedown', (e) => {
              e.preventDefault();
              isResizing = true;

              const rect = chatbotBox.getBoundingClientRect();
              startX = e.clientX;
              startY = e.clientY;
              startWidth = rect.width;
              startHeight = rect.height;

              // Store initial right and bottom positions to restore them later
              startRight = window.innerWidth - rect.right;
              startBottom = window.innerHeight - rect.bottom;

              // Temporarily switch to 'left' and 'top' for resizing
              // This is crucial to allow resizing from top-left (nesw-resize)
              chatbotBox.style.right = 'auto';
              chatbotBox.style.bottom = 'auto';
              chatbotBox.style.left = `${rect.left}px`;
              chatbotBox.style.top = `${rect.top}px`;
              chatbotBox.style.position = 'fixed';
            });

            document.addEventListener('mousemove', (e) => {
              if (!isResizing) return;

              const dx = e.clientX - startX;
              const dy = e.clientY - startY;

              const newWidth = Math.max(minChatboxWidth, startWidth - dx);
              const newHeight = Math.max(minChatboxHeight, startHeight - dy);

              // Calculate new left and top based on keeping right and bottom distances
              const newLeft = window.innerWidth - (startRight + newWidth);
              const newTop = window.innerHeight - (startBottom + newHeight);

              chatbotBox.style.width = `${newWidth}px`;
              chatbotBox.style.height = `${newHeight}px`;
              chatbotBox.style.left = `${newLeft}px`;
              chatbotBox.style.top = `${newTop}px`;
            });

            document.addEventListener('mouseup', () => {
              if (isResizing) {
                isResizing = false;
                // Revert to 'right' and 'bottom' positioning after resizing
                // This ensures the chatbox stays anchored to the bottom-right
                const rect = chatbotBox.getBoundingClientRect();
                chatbotBox.style.left = 'auto';
                chatbotBox.style.top = 'auto';
                chatbotBox.style.right = `${window.innerWidth - rect.right}px`;
                chatbotBox.style.bottom = `${window.innerHeight - rect.bottom}px`;
              }
            });
          }

          function handleInput() {
            const question = inputField.value.trim();
            if (!question) return;

            const userMsg = document.createElement("div");
            userMsg.textContent = question;
            userMsg.style.cssText = `margin-bottom: 10px; text-align: right; background-color: #e3f2fd; padding: 10px 15px; border-radius: 18px; max-width: 85%; margin-left: auto;`;
            messageContainer.appendChild(userMsg);
            inputField.value = "";
            typingIndicator.style.display = "block";
            messageContainer.scrollTop = messageContainer.scrollHeight;

            fetch("/ai_chatbot/ask", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ question: question })
            })
            .then(response => response.json())
            .then(raw => {
              const data = raw.result || raw;
              typingIndicator.style.display = "none";

              const botMsg = document.createElement("div");
              botMsg.textContent = data.answer || data.error || "Error al obtener respuesta.";
              botMsg.style.cssText = `
                margin-bottom: 10px;
                text-align: left;
                background-color: #f1f8e9;
                padding: 10px 15px;
                border-radius: 18px;
                max-width: 85%;
                margin-right: auto;
              `;
              messageContainer.appendChild(botMsg);
              messageContainer.scrollTop = messageContainer.scrollHeight;
            })
            .catch(error => {
              typingIndicator.style.display = "none";
              const botMsg = document.createElement("div");
              botMsg.textContent = "Error de conexi√≥n con el servidor.";
              botMsg.style.cssText = `
                margin-bottom: 10px;
                text-align: left;
                background-color: #ffe6e6;
                padding: 10px 15px;
                border-radius: 18px;
                max-width: 85%;
                margin-right: auto;
                color: #a00;
              `;
              messageContainer.appendChild(botMsg);
            });
          }

          function openChatbot() {
            renderChatbotBox();
            chatbotBox.style.display = 'flex';
            toggleButton.style.display = 'none';
          }

          if (toggleButton) {
            toggleButton.style.display = 'block';
            toggleButton.addEventListener("click", openChatbot);
          }
        });
        ]]>
      </script>
    </xpath>
  </template>
</odoo>
```
